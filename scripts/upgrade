#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

app=$YNH_APP_INSTANCE_NAME

# Retrieve arguments
domain=$(ynh_app_setting_get "$app" domain)
path_url=$(ynh_app_setting_get "$app" path)
admin=$(ynh_app_setting_get "$app" admin)
is_public=$(ynh_app_setting_get "$app" is_public)
db_name=$(ynh_app_setting_get "$app" db_name)
dbuser=$app
dbpass=$(ynh_app_setting_get "$app" mysqlpwd)
final_path=$(ynh_app_setting_get "$app" final_path)
language=$(ynh_app_setting_get "$app" language)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

if [ -z "$is_public" ];
then
    is_public=$(ynh_app_setting_get "$app" public_site)
    ynh_app_setting_set "$app" is_public "$is_public"
    ynh_app_setting_delete "$app" public_site
fi

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set "$app" is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set "$app" is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid "$app")
	ynh_app_setting_set "$app" db_name "$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set "$app" final_path "$final_path"
fi

# make sure default language is set
if [ -z "$language" ];
then
    language=$(grep LANGUE "/var/www/$app/variables.php" | grep -Po "'.*?'" | cut -d"'" -f2)
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path "$path_url")

# Check web path availability
ynh_webpath_available "$domain" "$path_url"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC UPGRADE
#=================================================

#=================================================
# STORE THE CHECKSUM OF THE CONFIG FILE
#=================================================
config="$final_path/app/inc/config.php"
# Verify the checksum and backup the file if it's different
ynh_backup_if_checksum_is_different "$config"

#=================================================
# Create config.php
#=================================================

cp ../conf/config.php "$config"

# Change variables in configuration
ynh_replace_string "__DBUSER__"    "$dbuser"   "$config"
ynh_replace_string "__DBPWD__"     "$dbpass"   "$config"
ynh_replace_string "__DBNAME__"    "$db_name"  "$config"
ynh_replace_string "__ADMINMAIL__" "$admin"    "$config"
ynh_replace_string "__LANGUAGE__"  "$language" "$config"
ynh_replace_string "__DOMAIN__"    "$domain"   "$config"
ynh_replace_string "__PATH__"      "$path_url" "$config"

#=================================================
# Replace logo image (default is FramaDate)
#=================================================

cp ../img/logo.png "$final_path/images"

#=================================================
# STORE THE CHECKSUM OF THE CONFIG FILE
#=================================================

# Recalculate and store the config file checksum into the app settings
ynh_store_file_checksum "$config"

#=================================================
# Create log file
#=================================================

# Create log file
touch "$final_path/admin/stdout.log"

#=================================================
# GENERIC FINALIZATION
#=================================================
# Run database initilization
#=================================================

# Set initial permissions for initilization
chown -R "$app": "$final_path"

init_composer "$app" "$final_path"

sudo -u "$app" php "$final_path/admin/migration.php"

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R root: "$final_path"
chown -R "$app": "$final_path/tpl_c"

#=================================================
# SETUP SSOWAT
#=================================================

ynh_app_setting_set "$app" skipped_uris "/"

if [ $is_public -eq 0 ];
then
	ynh_app_setting_set "$app" protected_uris "/"
else
	ynh_app_setting_set "$app" protected_uris "/admin"
	ynh_replace_string "	include conf.d/"  "	#include conf.d/"  "$finalnginxconf"

	ynh_store_file_checksum "$finalnginxconf"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
